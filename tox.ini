[tox]
envlist =
    fix
    py310
    py39
    py38
    py37
    coverage
    merge
    type
    readme
isolated_build = true
skip_missing_interpreters = true
minversion = 3.14

[testenv]
description = run the unit tests with pytest under {basepython}
setenv =
    COVERAGE_FILE = {toxworkdir}/.coverage.{envname}
    COVERAGE_PROCESS_START = {toxinidir}/setup.cfg
    _COVERAGE_SRC = {envsitepackagesdir}/sphinx_argparse_cli
extras =
    test
commands =
    pytest {tty:--color=yes} {posargs: \
      --junitxml {toxworkdir}{/}junit.{envname}.xml --cov {envsitepackagesdir}{/}retype \
      --cov {toxinidir}{/}tests \
      --cov-config=setup.cfg --no-cov-on-fail --cov-report term-missing:skip-covered --cov-context=test \
      --cov-report html:{envtmpdir}{/}htmlcov --cov-report xml:{toxworkdir}{/}coverage.{envname}.xml \
      tests}
package = wheel
wheel_build_env = .pkg

[testenv:fix]
description = run static analysis and style check using flake8
passenv =
    HOMEPATH
    PROGRAMDATA
basepython = python3.10
skip_install = true
deps =
    pre-commit>=2
commands =
    pre-commit run --all-files --show-diff-on-failure
    python -c 'print("hint: run {envdir}/bin/pre-commit install to add checks as pre-commit hook")'

[testenv:coverage]
description = [run locally after tests]: combine coverage data and create report;
    generates a diff coverage against origin/master (can be changed by setting DIFF_AGAINST env var)
passenv =
    DIFF_AGAINST
setenv =
    COVERAGE_FILE = {toxworkdir}/.coverage
skip_install = true
deps =
    covdefaults>=2
    coverage>=6.2
    diff-cover>=6.4
parallel_show_output = true
commands =
    coverage combine
    coverage report -m
    coverage xml -o {toxworkdir}/coverage.xml
    coverage html -d {toxworkdir}/htmlcov
    diff-cover --compare-branch {env:DIFF_AGAINST:origin/main} {toxworkdir}/coverage.xml
depends =
    py310
    py39
    py38
    py37

[testenv:merge]
description = try to merge our types against our types
deps =
    mypy==0.910
    types-typed-ast
changedir = {envtmpdir}
commands =
    python -m retype -p {toxinidir}/types -t {envtmpdir} {toxinidir}
    mypy {envtmpdir} --strict --ignore-missing-imports {posargs}

[testenv:type]
description = run type check on code base
setenv =
    {tty:MYPY_FORCE_COLOR = 1}
deps =
    mypy==0.930
    types-typed-ast
commands =
    mypy --strict --python-version 3.10 types

[testenv:readme]
description = check that the long description is valid
basepython = python3.10
skip_install = true
deps =
    build[virtualenv]>=0.7
    twine>=3.7
commands =
    python -m build --sdist --wheel -o {envtmpdir} .
    twine check {envtmpdir}/*

[testenv:dev]
description = generate a DEV environment
basepython = python3.10
usedevelop = true
extras =
    docs
    test
commands =
    python -m pip list --format=columns
    python -c 'import sys; print(sys.executable)'

[pytest]
junit_family = xunit2
