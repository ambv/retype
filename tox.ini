[tox]
envlist =
    py310
    py39
    py38
    py37
    py36
    coverage
    merge
    type
    fix_lint
    package_readme
isolated_build = true
skip_missing_interpreters = true
minversion = 3.14

[testenv]
description = run tests with {basepython}
passenv =
    CI_RUN
    HOME
    PIP_*
    PYTEST_*
    TERM
setenv =
    COVERAGE_FILE = {toxworkdir}/.coverage.{envname}
extras =
    testing
commands =
    pytest \
      --cov "{envsitepackagesdir}/retype" \
      --cov-report xml:{toxworkdir}/coverage.{envname}.xml \
      --junitxml {toxworkdir}/junit.{envname}.xml \
      tests {posargs}
package = wheel
wheel_build_env = .pkg

[testenv:coverage]
description = [run locally after tests]: combine coverage data and create report;
    generates a diff coverage against origin/master (can be changed by setting DIFF_AGAINST env var)
passenv =
    DIFF_AGAINST
setenv =
    COVERAGE_FILE = {toxworkdir}/.coverage
skip_install = true
deps =
    coverage>=5
    diff_cover
extras =
parallel_show_output = true
commands =
    coverage combine
    coverage report --show-missing
    coverage xml -o {toxworkdir}/coverage.xml
    coverage html -d {toxworkdir}/htmlcov
    diff-cover --compare-branch {env:DIFF_AGAINST:origin/master} {toxworkdir}/coverage.xml
depends =
    py310
    py39
    py38
    py37
    py36

[testenv:merge]
description = try to merge our types against our types
deps =
    {[testenv:type]deps}
changedir = {envtmpdir}
commands =
    python -m retype -p {toxinidir}/types -t {envtmpdir} {toxinidir}
    mypy {envtmpdir} --strict --ignore-missing-imports {posargs}

[testenv:type]
description = run the type checker
skip_install = true
deps =
    mypy==0.910
    types-typed-ast
commands =
    mypy types --strict

[testenv:fix_lint]
description = format the code base to adhere to our styles, and complain about what we cannot do automatically
passenv =
    {[testenv]passenv}
    PROGRAMDATA
skip_install = true
deps =
    pre-commit>=2
extras =
    lint
commands =
    pre-commit run --all-files --show-diff-on-failure
    python -c 'import pathlib; print("hint: run \{\} install to add checks as pre-commit hook".format(pathlib.Path(r"{envdir}") / "bin" / "pre-commit"))'

[testenv:package_readme]
description = check that the long description is valid (need for PyPi)
skip_install = true
deps =
    build>=0.5
    twine>=3
extras =
commands =
    python -m build -o {envtmpdir}/build --sdist --wheel .
    twine check {envtmpdir}/build/*

[testenv:dev]
description = generate a DEV environment
usedevelop = true
commands =
    python -m pip list --format=columns
    python -c 'import sys; print(sys.executable)'
